swagger: "2.0"
info:
  description: "This is a player data server"
  version: "1.0"
  title: "Player Data Server"
host: "localhost:3000"
basePath: "/api/v1"
tags:
  - name: "players"
    description: "All endpoints to create, read, update, and delete player data"
schemes:
  - "http"
paths:
  /players:
    get:
      tags:
        - "players"
      summary: "Read all players data"
      description: ""
      operationId: "getPlayers"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "Success"
              data:
                type: "array"
                items:
                  $ref: "#/definitions/Player"
    post:
      tags:
        - "players"
      summary: "Add a new player"
      description: ""
      operationId: "createPlayer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Player object that needs to be added to the database"
          required: true
          schema:
            type: "object"
            required:
              - username
              - email
              - password
            properties:
              username:
                type: "string"
                example: Lorem Ipsum
              email:
                type: "string"
                example: lorem@ipsum.com
              password:
                type: "string"
                example: loremipsum
              experience:
                type: "integer"
                example: 600000
                default: 0
      responses:
        "201":
          description: "Success"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "Success"
              data:
                $ref: "#/definitions/Player"
        "400":
          description: "Failed"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "Failed"
              message:
                type: "string"
                example: "Error message"
  /players/{id}:
    get:
      tags:
        - "players"
      summary: "Find player by ID"
      description: ""
      operationId: "getPlayerById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of player to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Success"
          schema:
            type: "object"
            properties:
              result:
                type: "string"
                example: "Success"
              data:
                $ref: "#/definitions/Player"
        "404":
          description: "Not found"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "Not found"
              message:
                type: "string"
                example: "Player with 1 not found."
    put:
      tags:
        - "players"
      summary: "Update an existing player"
      description: ""
      operationId: "updatePlayer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of player to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Player object that needs to be updated"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                example: Lorem Ipsum
              email:
                type: "string"
                example: lorem@ipsum.com
              password:
                type: "string"
                example: loremipsum
      responses:
        "200":
          description: "Success"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "Success"
              message:
                type: "string"
                example: "Player with id: 1 successfully updated"
        "404":
          description: "Not found"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "Not found"
              message:
                type: "string"
                example: "Player with 1 not found."
        "500":
          description: "Failed"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "failed"
              message:
                type: "string"
                example: "Failed to update"
          
    delete:
      tags:
        - "players"
      summary: "Deletes a player"
      description: ""
      operationId: "deletePlayer"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of player to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Success"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "Success"
              message:
                type: "string"
                example: "Player with id: 1, was deleted successfully"
        "400":
          description: "Failed"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "FAILED"
              message:
                type: "string"
                example: "Cannot delete Player with id=1. Maybe Player was not found!"
  /players/exp/{id}:
    post:
      tags:
        - "players"
      summary: "Update player experience by ID"
      description: ""
      operationId: "updateExperience"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of player to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Player object that needs to be updated"
          required: true
          schema:
            type: "object"
            required:
              - exp
            properties:
              exp:
                type: "integer"
                example: 600000
      responses:
        "200":
          description: "Success"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "Success"
              message:
                type: "string"
                example: "Player with id = 1 gain 1000 experience. Total experience = 11000"
        "400":
          description: "Failed"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "FAILED"
              message:
                type: "string"
                example: "Cannot update Player with id=1!"
        "404":
          description: "Not found"
          schema: 
            type: "object"
            properties:
              result:
                type: "string"
                example: "Not found"
              message:
                type: "string"
                example: "Player with 1 is not found."
definitions:
  Player:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      username:
        type: "string"
        example: Lorem Ipsum
      email:
        type: "string"
        example: lorem@ipsum.com
      password:
        type: "string"
        example: loremipsum
      experience:
        type: "integer"
        example: 600000
      lvl:
        type: "integer"
        example: 600
      createdAt:
        type: "string"
        example: "2022-01-01T12:00:00.000Z"
      updatedAt:
        type: "string"
        example: "2022-01-01T12:00:00.000Z"